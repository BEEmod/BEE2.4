// This is injected at the end of Portal2.fgd.
 
@BaseClass = BEETemplateEnt
	[
	template_id(string): "Template ID" : "" : "The unique ID this template has (in the combined file)."
	visgroup(string): "Visgroup" : "" : "The visgroup this brush/overlay was contained in (in the combined file)."
	]

@SolidClass base(BEETemplateEnt) = bee2_template_world: "A set of world brushes which will be templated into a map."
	[
	]

@SolidClass base(BEETemplateEnt) = bee2_template_detail: "A set of detail brushes which will be templated into a map."
	[
	]

@PointClass base(BEETemplateEnt, info_overlay) 
	size(-1 -1 0, 1 1 1)
	color(80 150 225)
	studio("models/editor/overlay_helper.mdl")
	iconsprite("BEE2/editor/bee2_icon.vmt")
	sphere(fademindist)
	sphere(fademaxdist)
	overlay()
	= bee2_template_overlay : 
	"An overlay which will be templated into a map." 
	[
	]
	
@PointClass base(BEETemplateEnt) iconsprite("BEE2/editor/bee2_icon.vmt") = bee2_template_scaling:
	"Used to store the values for a scaling template."
	[
	up_tex(material): "Up Texture" : "" : "Texture for the upward-pointing face."
	up_uaxis(string): "Up (U)" : "" : "Uaxis data for the upward-pointing face."
	up_vaxis(string): "Up (V)" : "" : "Vaxis data for the upward-pointing face."
	up_rotation(float): "Up Rotation" : 0 : "Rotation value fo the upward-pointing face."
	
	// Divider in the Hammer display, doesn't do anything.
	_sep1(string) readonly: "---------" : ""
	
	dn_tex(material): "Down Texture" : "" : "Texture for the downward-pointing face."
	dn_uaxis(string): "Down (U)" : "" : "Uaxis data for the downward-pointing face."
	dn_vaxis(string): "Down (V)" : "" : "Vaxis data for the downward-pointing face."
	dn_rotation(float): "Up Rotation" : 0 : "Rotation value for the downward-pointing face."
	
	_sep2(string) readonly: "---------" : ""
	
	n_tex(material): "North Texture" : "" : "Texture for the north-pointing face."
	n_uaxis(string): "North (U)"  : "" : "Uaxis data for the north-pointing face."
	n_vaxis(string): "North (V)"  : "" : "Vaxis data for the north-pointing face."
	n_rotation(float): "North Rotation" : 0 : "Rotation value for the north-pointing face."
	
	_sep3(string) readonly: "---------" : ""
	
	s_tex(material): "South Texture" : "" : "Texture for the south-pointing face."
	s_uaxis(string): "South (U)"  : "" : "Uaxis data for the south-pointing face."
	s_vaxis(string): "South (V)"  : "" : "Vaxis data for the south-pointing face."
	s_rotation(float): "South Rotation" : 0 : "Rotation value for the south-pointing face."
	
	_sep3(string) readonly: "---------" : ""
	
	e_tex(material): "East Texture" : "" : "Texture for the east-pointing face."
	e_uaxis(string): "East (U)"  : "" : "Uaxis data for the east-pointing face."
	e_vaxis(string): "East (V)"  : "" : "Vaxis data for the east-pointing face."
	e_rotation(float): "East Rotation" : 0 : "Rotation value for the north-pointing face."
	
	_sep4(string) readonly: "---------" : ""
	
	w_tex(material): "West Texture" : "" : "Texture for the west-pointing face."
	w_uaxis(string): "West (U)"  : "" : "Uaxis data for the west-pointing face."
	w_vaxis(string): "West (V)"  : "" : "Vaxis data for the west-pointing face."
	w_rotation(float): "West Rotation" : 0 : "Rotation value for the north-pointing face."
	]

@PointClass 
	iconsprite("BEE2/editor/bee2_icon.vmt")
	sidelist(realign_faces)
	= bee2_template_conf:
	"Defines configuration options for a template."
	[
	template_id(string): "Template ID" : "" : "The ID given to this template. If set this will be loaded automatically."
	
	realign_faces(sidelist): "Realign Faces" : : "Rotate and realign these faces to world." +
	"This should be used on axis-aligned tile surfaces, to make texturing match in different templates. " +
	"The faces must be axis-aligned."
	vertical_faces(sidelist): "Rotate Faces to Vertical" : : "Rotate these faces in 90 degree increments until they point upwards."
	skip_faces(sidelist): "Don't Retexture these faces" : : "Do not change textures on these faces."
	overlay_faces(sidelist): "Overlay Transfer Faces" : : "Apply overlays on the base surface to this, when using BindOverlay."
	
	temp_type(choices): "Template Type" : "default" : "Convert brushes to this type of entity." =
		[
		"default" : "Original Type"
		"world" : "World Brush"
		"detail" : "func_detail"
		]
	
	is_scaling(boolean): "Save as Scaling Template" : 0 : "Scaling templates are a world-aligned cube for texturing brush sides in specific orientations. " +
	"Set this to discard excess data."
	discard_brushes(boolean): "Discard Brushes" : 0 : "Don't keep brushes, for templates used to position overlays only."
	detail_auto_visgroup(boolean): "Group Detail Entities" : 0 : "If True, each func_detail entity will be put into a auto_xx visgroup. Otherwise, all func_detail will be ungrouped. World brushes stay ungrouped regardless."
	]
	
@PointClass
	base(Angles)
	iconsprite("BEE2/editor/bee2_icon.vmt")
	studioprop("models/editor/angle_helper.mdl")
	sidelist(faces)
	= bee2_template_colorpicker:
	"Applies the color of a surface at a position to template faces. The arrow should point out of the surface."
	[
	targetname(target_source): "Name" : "": "Set the name for reference from other entities."
	template_id(string): "Template ID" : "" : "The unique ID this template has (in the combined file)."

	faces(sidelist): "Faces" : : "The faces this position is applied to."

	priority(integer): "Priority" : 0 : "Set this higher to make it apply in preference to other pickers. This allows using fallback positions for surfaces."

	grid_snap(boolean): "Snap To Grid" : 0 : "For items like fizzlers, snap to the closest grid position in side directions."
	
	use_pattern(boolean): "Use Tile Pattern": 0 : "Force this surface to use the texture of the tile that would be here. " +
		"Should be used ONLY on brushes pointing straight up, and that are split on the 32x32 lines to replace the normal surface entirely."

	tex_white(material) : "White Material" : : "If set, the sides will be switched to this specific material if the surface is WHITE."
	tex_black(material) : "Black Material" : : "If set, the sides will be switched to this specific material if the surface is BLACK."

	remove_brush(choices): "Remove Tile" : 0 : "After grabbing the surface, should the tile be removed?" = 
		[
		0: "Do not change"
		1: "Remove Tile (Set to VOID)"
		2: "Set to Nodraw"
		]
	]

@PointClass
	base(Angles)
	studioprop("models/BEE2/editor/tile_setter.mdl")
	line(64 64 64, targetname, color_picker)
	= bee2_template_tilesetter:
	"Applies a tile type to a surface."
	[
	template_id(string): "Template ID" : "" : "The unique ID this template has (in the combined file)."
	color_picker(target_destination): "Color Picker": "" : "If set, use this colorpicker to reuse existing textures."

	force(boolean) : "Force Place" : 0 : "If enabled, place the tile regardless of what's already in this position."
	
	color(choices): "Color" : "tile" : "The color to use for tiles (if applicable). If set to Match Var or Invert Var, the template must provide a color." = 
		[
		"tile": "Use tile colour"
		"match": "Match var"
		"invert": "Invert var"
		"copy": "Copy type, not color"
		]
	
	skin(choices): "Tile Type" : "4": "The tile type to apply." = 
		[
		0: "Black"
		1: "4x4 Black"
		2: "White"
		3: "4x4 White"
		4: "Nodraw"
		5: "Void (remove tile)"
		6: "Cutout Tile (Broken)"
		7: "Cutout Tile (Partial)"
		]
	]

// --------
// Entities used with editoritems_gen.py to make editoritems configs.
// These should not appear in any maps.

@PointClass 
	base(Angles)
	studioprop("models/BEE2/editor/connection_point.mdl")
	= bee2_editor_connectionpoint: "Defines a connection point for antlines."
	[
	skin(choices) : "Orientation" : 1 : "The position of the antline relative to the signage." =
		[
		// 0 = useless, needed to distinguish materials in the model.
		1: "Close Left"
		2: "Close Right"
		3: "Far Left"
		4: "Far Right"
		]
	priority(integer) : "Priority" : 0 : "Defines which connection points are used first."
	group_id(string) : "Group ID" : "" : "?"
	]

@PointClass wirebox(min, max) = bee2_editor_embeddedvoxel: "Defines an EmbeddedVoxel section of an item. The shape is aligned to the 128-grid."
	[
	min(vecline) : "Minimum Position" : "-64 -64 0" : "The minimum position of the hollowed area."
	min(vecline) : "Maximum Position" : "64 64 0" : "The maximum position of the hollowed area."
	]

@PointClass wirebox(min, max) = bee2_editor_embedface: "Defines a EmbedFace section for an item."
	[
	min(vecline) : "Minimum Position" : "-64 -64 0" : "The minimum position of the brush section. Vertical position is ignored."
	min(vecline) : "Maximum Position" : "64 64 0" : "The minimum position of the brush section. Vertical position is ignored."
	
	tile_type(choices)  : "Tile Size" : "4x4" : "The size of tile to generate." =
		[
		"4x4_checkered" : "4x4 Checkered Tiles"
		"4x4"           : "4x4 Tiles"
		"2x2"           : "2x2 Tiles"
		"1x1"           : "1x1 Tiles"
		"Grid_Default"  : "Normal Wall"
		]
	]

// Entities added to the finished map to pass information to VRAD.
	
@PointClass
	base(Angles)
	iconsprite("BEE2/editor/bee2_icon.vmt")
= bee2_music_channel:
	"Stores the configuration for the music soundscript."
	[
	channel(choices) : "Channel" : "BASE" : "The type of music this contains." = 
		[	
    	"base"      : "Main track"
		"tbeam"     : "Excursion Funnel"
    	"BounceGel" : "Repulsion Gel"
    	"SpeedGel"  : "Propulsion Gel"
		]
	sync(boolean) : "Sync" : 0 : "For funnels only, synchronise to the base track."

	track01(sound) : "Track" : : "A track which may be potentially selected."
	track02(sound) : "Track" : : "A track which may be potentially selected."
	track03(sound) : "Track" : : "A track which may be potentially selected."
	track04(sound) : "Track" : : "A track which may be potentially selected."
	track05(sound) : "Track" : : "A track which may be potentially selected."
	track06(sound) : "Track" : : "A track which may be potentially selected."
	track07(sound) : "Track" : : "A track which may be potentially selected."
	track08(sound) : "Track" : : "A track which may be potentially selected."
	track09(sound) : "Track" : : "A track which may be potentially selected."
	track10(sound) : "Track" : : "A track which may be potentially selected."
	track11(sound) : "Track" : : "A track which may be potentially selected."
	track12(sound) : "Track" : : "A track which may be potentially selected."
	track13(sound) : "Track" : : "A track which may be potentially selected."
	track14(sound) : "Track" : : "A track which may be potentially selected."
	track15(sound) : "Track" : : "A track which may be potentially selected."
	track16(sound) : "Track" : : "A track which may be potentially selected."
	track17(sound) : "Track" : : "A track which may be potentially selected."
	track18(sound) : "Track" : : "A track which may be potentially selected."
	track19(sound) : "Track" : : "A track which may be potentially selected."
	track20(sound) : "Track" : : "A track which may be potentially selected."
	]

@PointClass
	iconsprite("BEE2/editor/bee2_icon.vmt")
= bee2_coop_response :
	"Stores the choreo scenes for responses to players in Coop."
	[
	type(string) : "Type" : : "The type of response this is."
	choreo01(scene) : "Scene" : : "Random line to use."
	choreo02(scene) : "Scene" : : "Random line to use."
	choreo03(scene) : "Scene" : : "Random line to use."
	choreo04(scene) : "Scene" : : "Random line to use."
	choreo05(scene) : "Scene" : : "Random line to use."
	choreo06(scene) : "Scene" : : "Random line to use."
	choreo07(scene) : "Scene" : : "Random line to use."
	choreo08(scene) : "Scene" : : "Random line to use."
	choreo09(scene) : "Scene" : : "Random line to use."
	choreo10(scene) : "Scene" : : "Random line to use."
	choreo11(scene) : "Scene" : : "Random line to use."
	choreo12(scene) : "Scene" : : "Random line to use."
	choreo13(scene) : "Scene" : : "Random line to use."
	choreo14(scene) : "Scene" : : "Random line to use."
	choreo15(scene) : "Scene" : : "Random line to use."
	choreo16(scene) : "Scene" : : "Random line to use."
	choreo17(scene) : "Scene" : : "Random line to use."
	choreo18(scene) : "Scene" : : "Random line to use."
	choreo19(scene) : "Scene" : : "Random line to use."
	choreo20(scene) : "Scene" : : "Random line to use."
	]

@PointClass
	iconsprite("BEE2/editor/bee2_icon.vmt")
= bee2_cube_filter_script:
	"Stores models used for VScript cube filters."
	[
	filename(string) : "Filename" : : "The filename to produce."
	function(string) : "Function" : : "The name of the function generated."
	mdl01(studio) : "Model" : : "A model that satisfies the predicate."
	mdl02(studio) : "Model" : : "A model that satisfies the predicate."
	mdl03(studio) : "Model" : : "A model that satisfies the predicate."
	mdl04(studio) : "Model" : : "A model that satisfies the predicate."
	mdl05(studio) : "Model" : : "A model that satisfies the predicate."
	mdl06(studio) : "Model" : : "A model that satisfies the predicate."
	mdl07(studio) : "Model" : : "A model that satisfies the predicate."
	mdl08(studio) : "Model" : : "A model that satisfies the predicate."
	mdl09(studio) : "Model" : : "A model that satisfies the predicate."
	mdl10(studio) : "Model" : : "A model that satisfies the predicate."
	mdl11(studio) : "Model" : : "A model that satisfies the predicate."
	mdl12(studio) : "Model" : : "A model that satisfies the predicate."
	mdl13(studio) : "Model" : : "A model that satisfies the predicate."
	mdl14(studio) : "Model" : : "A model that satisfies the predicate."
	mdl15(studio) : "Model" : : "A model that satisfies the predicate."
	mdl16(studio) : "Model" : : "A model that satisfies the predicate."
	mdl17(studio) : "Model" : : "A model that satisfies the predicate."
	mdl18(studio) : "Model" : : "A model that satisfies the predicate."
	mdl19(studio) : "Model" : : "A model that satisfies the predicate."
	mdl20(studio) : "Model" : : "A model that satisfies the predicate."
	]


@AutoVisGroup = "BEE2"
	[
	"Templates"
		[
		"bee2_template_world"
		"bee2_template_detail"
		"bee2_template_overlay"
		"bee2_template_scaling"
		"bee2_template_conf"
		]
	"Editoritems"
		[
		"bee2_editor_connectionpoint"
		"bee2_editor_embeddedvoxel"
		"bee2_editor_embedface"
		]
	"Map Data"
		[
		"bee2_music_channel"
		"bee2_coop_response"
		"bee2_cube_filter_script"
		]
	]

@AutoVisGroup = "Templates"
	[
	"World"
		[
		"bee2_template_world"
		]
	"Detail"
		[
		"bee2_template_detail"
		]
	"Overlay"
		[
		"bee2_template_overlay"
		]
	"Scaling Temp"
		[
		"bee2_template_scaling"
		]
	"Configuration"
		[
		"bee2_template_conf"
		]
	"Color Picker"
		[
		"bee2_template_colorpicker"
		]
	"Tile Setter"
		[
		"bee2_template_tilesetter"
		]
	]
