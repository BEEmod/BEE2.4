[tool.pyright]
include = [
	"src/",
	"hammeraddons/src/",
	]
exclude = [
	"**/__pycache__"
	]
venv = "BEE2-12"
stubPath = "src/"   # Use our module for stubs.
# We want to do conversions when setting.
reportPropertyTypeMismatch = false
pythonVersion = "3.12"
strictParameterNoneValue = false

[tool.isort]
sections=["FUTURE", "TYPING", "FRAMEWORK", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
known_framework = ["tkinter", "tkinter.ttk", "tkinter.messagebox"]
extra_standard_library = ["importlib_resources", "exceptiongroup"]
known_typing = ["typing", "typing_extensions"]
no_lines_before = ["TYPING", "FRAMEWORK", "STDLIB"]
known_third_party = ["hammeraddons"]
multi_line_output = 5 # hanging grid grouped
line_length = 80
lines_after_imports = 2
use_parentheses = true
order_by_type = true
include_trailing_comma = true
from_first = true
combine_as_imports = true
src_paths = ["src"]

[tool.ruff]
line-length = 127
target-version = "py312"

exclude = [
	"src/perlin.py",
	"src/precomp/conditions/cutoutTile.py",
]

[tool.ruff.lint]
select = [
	"E", "UP", "F", "C4", "ANN", "B", "PIE", "RUF", "PYI",
	"PLC", "PLE", "PLW",  # Pylint.
	"YTT",

	"TCH005",  # Empty type-checking block.
]
allowed-confusables = [
	"Ã—",  # Multiplication sign
]
extend-ignore = [
	"E201", "E202", "E203", "E221", "E222", "E241", # Allow extra whitespace.
	"E226",  # Allow 4*6 + 8
	"E402",  # Allow module level import later in the file.
	"E731",  # Lambda assignment used intentionally for callbacks.
	"F403",  # Allow *-imports,
	"F405",  # name may be undefined, or defined from star imports: module
	"F841",  # Unused local triggers on partial unpacks.

	# Flake8-annotations.
	# Type annotations for self & cls are not important.
	"ANN101",
	"ANN102",
	"ANN401",  # Allow typing.Any

	# Ruff:
	"RUF022",  # Sorting __all__
	"RUF023",  # Sorting __slots__
	"RUF005",  # Unpack instead of concat triggers on Vec.
	"RUF100",  # Sometimes use # noqa for other linters
	"RUF027",  # Catches TransToken using {}-formatting without an f-string.

	# PyLint:
	"PLW0603",  # Allow use of global statement.
	"PLC0414",  # import x as x is used for type checking.
	"PLE1205",  # Too many arguments for logging, doesn't handle our format
	"PLC0415",  # Imports not at top level are used for specific reasons
	"PLW2901",  # Allow redefining loop var inside the loop.
	"PLW0120",  # for-else with return/break inside is just stylistic, exactly equivalent.
	"PLC1901",  # Allow comparison to empty string etc.
	"PLW0108",  # Need lambdas for deliberate late binding sometimes.

	# Flake8-pyi:
	"PYI041",  # Use int | float

	# Pyupgrade:
	# Keep using typing's types even with __future__.annotations.
	"UP006", "UP007", "UP035",

	# Flake8-bugbear:
	# Loop control var not used, triggers on unpackings.
	"B007",

	# Flake8-pie:
	# Prefer to use pass in empty functions, even if docstring is present
	"PIE790",
	# Allow aliases for enum values, used often.
	"PIE796",
	# Start arg for range is sometimes clearer
	"PIE808",
	]

[tool.ruff.lint.flake8-bugbear]
extend-immutable-calls = [
	# Objects which are immutable, or close enough that it's fine to be in func defaults.
	"srctools.math.FrozenVec", "srctools.math.FrozenAngle", "srctools.math.FrozenMatrix",
	"srctools.FrozenVec", "srctools.FrozenAngle", "srctools.FrozenMatrix",
	# Image handle variants, all publically frozen.
	"app.img.Handle.background", "app.img.Handle.blank", "app.img.Handle.builtin",
	"app.img.Handle.color", "app.img.Handle.composite", "app.img.Handle.crop",
	"app.img.Handle.error", "app.img.Handle.file", "app.img.Handle.ico_loading",
	"app.img.Handle.ico_none", "app.img.Handle.overlay_text", "app.img.Handle.parse",
	"app.img.Handle.parse_uri", "app.img.Handle.resize", "app.img.Handle.sprite", "app.img.Handle.with_alpha_stripped",

	# Translation token variants.
	"transtoken.TransToken.parse", "transtoken.TransToken.ui", "transtoken.TransToken.ui_plural",
	"transtoken.TransToken.join", "transtoken.TransToken.from_valve",
	"transtoken.TransToken.untranslated",
	"transtoken.TransToken.list_and", "transtoken.TransToken.list_or",

	"tkMarkdown.MarkdownData.text",
	# Cast is not really a function call, just returns the arg.
	"typing.cast",
]

[tool.mypy]
mypy_path = "$MYPY_CONFIG_FILE_DIR/hammeraddons/src/"
allow_redefinition = true
check_untyped_defs = true
extra_checks = true
strict_equality = true
strict_optional = true
local_partial_types = true
implicit_reexport = false
# strict = true  # Only when overrides is gone.

warn_unused_ignores = true
warn_redundant_casts = true
warn_return_any = true
warn_no_return = true
# warn_unreachable = true  # TODO: Bunch of errors still

disallow_incomplete_defs = true
disallow_untyped_defs = true
disallow_untyped_decorators = true
disallow_untyped_calls = true
disallow_any_generics = false

enable_error_code = [
	'comparison-overlap',
	'mutable-override',
	'narrowed-type-not-subtype',
	'no-untyped-call',
	'no-untyped-def',
	'redundant-cast',
	'redundant-expr',
	'redundant-self',
	'truthy-bool',
	'truthy-iterable',
	'unimported-reveal',
	'unreachable',
	'unused-awaitable',
#	'explicit-override',
]

[[tool.mypy.overrides]]
# TODO: make these pass strict checks.
module = [
	'app.backup',
	'app.UI',
	'precomp.conditions._scaffold_compat',
	'precomp.bottomlessPit',
	'precomp.fizzler',
	'ui_tk.check_table',
]
strict_optional = false

disallow_incomplete_defs = false
disallow_untyped_defs = false
disallow_untyped_decorators = false
disallow_untyped_calls = false

[[tool.mypy.overrides]]
# No stubs yet.
module = ['pyglet.*', 'mistletoe.*']
ignore_missing_imports = true

# Dead code, needs to be rewritten.
[[tool.mypy.overrides]]
module = 'precomp.conditions.cutoutTile'
ignore_errors = true
